#!/bin/bash

# Multi-payload Coreboot build
# Junde Yhi <lmy441900@aosc.xyz>

COREBOOT_VERSION="4.11"
LIBREBOOT_CHECKOUT="64444d29d28a8be7d988a2841636a91a953d8825"
GRUB_VERSION="2.04"
SEABIOS_VERSION="1.13.0"
EDK2_VERSION="edk2-stable201911"
INTEL_MICROCODE_CHECKOUT="microcode-20191115"

# The script assumes Ubuntu 18.04 LTS.

# Install dependencies
sudo apt install \
  bison build-essential curl flex git gnat libncurses5-dev m4 zlib1g-dev \ # Coreboot
  mtools dosfstools \ # ich9gen
  gettext pkg-config libfreetype6-dev unifont python autoconf automake autopoint \ # GRUB2
  liblzma-dev libzfslinux-dev \ # GRUB2 extras
  uuid-dev python3-distutils # EDK-II

# Download
wget "https://coreboot.org/releases/coreboot-${COREBOOT_VERSION}.tar.xz"
git clone "https://notabug.org/libreboot/libreboot.git"
wget "https://ftp.gnu.org/gnu/grub/grub-${GRUB_VERSION}.tar.xz"
wget "https://github.com/tianocore/edk2/archive/${EDK2_VERSION}.tar.gz"
git clone "https://github.com/coreboot/intel-microcode"

# Extract
tar xf "coreboot-${COREBOOT_VERSION}.tar.xz"
pushd libreboot
git checkout "${LIBREBOOT_CHECKOUT}"
popd
tar xf "grub-${GRUB_VERSION}.tar.xz"
tar xf "${EDK2_VERSION}.tar.gz"
pushd intel-microcode
git checkout "${INTEL_MICROCODE_CHECKOUT}"
popd

# ich9gen
cp config/macaddress libreboot/projects/ich9gen/configs/macaddress

pushd libreboot
./libreboot build ich9gen
popd

cp libreboot/build/ich9fdgbe_8m.bin .
IFD_PATH="$(pwd)"

# coreboot (toolchain)
mkdir -p xgcc-i386-x64
XGCC_PATH="$(pwd)/xgcc-i386-x64"

pushd "coreboot-${COREBOOT_VERSION}"
make crossgcc-i386 CPUS=$(( $(nproc) + 1 )) DEST="${XGCC_PATH}"
make crossgcc-x64 CPUS=$(( $(nproc) + 1 )) DEST="${XGCC_PATH}"
popd

tar c xgcc-i386-x64/ | xz -ze9v -T 0 > xgcc-i386-x64-${COREBOOT_VERSION}.tar.xz
PATH="${XGCC_PATH}:${PATH}"

# coreboot (base image)
cp coreboot.config "coreboot-${COREBOOT_VERSION}"/.config
cp -r intel-microcode "coreboot-${COREBOOT_VERSION}"/3rdparty/

pushd "coreboot-${COREBOOT_VERSION}"
sed -e "s,@IFD_PATH@,${IFD_PATH}/ich9fdgbe_8m.bin,g" -i .config
make -j 1
popd

cp "coreboot-${COREBOOT_VERSION}"/build/{coreboot.rom,cbfstool} .

# GRUB2
mkdir -p grub-i386-coreboot "grub-${GRUB_VERSION}"/build
GRUB_PATH="$(pwd)/grub-i386-coreboot"

pushd "grub-${GRUB_VERSION}"/build
# fixme: cross-grub cause a compilation error on SizeT (32 -> 64)
../configure --prefix="${GRUB_PATH}" \
             --with-platform=coreboot \
             --enable-liblzma --enable-libzfs \
             --disable-grub-mkfont --disable-grub-themes
make -j $(( $(nproc) + 1 ))
make install
popd

tar c grub-i386-coreboot/ | xz -ze9v -T 0 > grub-i386-coreboot-${GRUB_VERSION}.tar.xz

# gen grub2 standalone img w/ cfg
${GRUB_PATH}/grub-mkstandalone --format=i386-coreboot --compress=xz --output=grub.elf /boot/grub/grub.cfg=./grub.cfg

# SeaBIOS
cp seabios.config "seabios-${SEABIOS_VERSION}"/.config

pushd "seabios-${SEABIOS_VERSION}"
make -j $(( $(nproc) + 1 )) CROSS_PREFIX="i386-elf-" EXTRAVERSION="-yhi"
popd

cp "seabios-${SEABIOS_VERSION}"/out/{bios.bin.elf,vgabios.bin} .

# TianoCore (EDK-II)
pushd "edk2-${EDK2_VERSION}"
make -j $(( $(nproc) + 1 )) -C BaseTools
source edksetup.sh
sed -e "s,DEFINE GCC5_IA32_PREFIX        = ENV(GCC5_BIN),DEFINE GCC5_IA32_PREFIX        = i386-elf-,g" -i Conf/tools_def.txt
sed -e "s,DEFINE GCC5_X64_PREFIX         = ENV(GCC5_BIN),DEFINE GCC5_X64_PREFIX         = x86_64-elf-,g" -i Conf/tools_def.txt
build -a IA32 -a X64 -p UefiPayloadPkg/UefiPayloadPkgIa32X64.dsc -n 0 -b RELEASE -t GCC5 -D BOOTLOADER=COREBOOT
popd

cp "edk2-${EDK2_VERSION}"/Build/UefiPayloadPkgX64/RELEASE_GCC5/FV/UEFIPAYLOAD.fd .

# Add things to the base Coreboot image
./cbfstool coreboot.rom add-payload -f grub.elf -n fallback/payload -c lzma
./cbfstool coreboot.rom add-payload -f bios.bin.elf -n img/seabios -c lzma
./cbfstool coreboot.rom add-payload -f UEFIPAYLOAD.fd -n img/tianocore -c lzma
./cbfstool coreboot.rom add -f vgabios.bin -n vgaroms/seavgabios.bin -c lzma
